import { AuthService } from '../services/AuthService';
import SecurityMonitoringService from '../services/SecurityMonitoringService';

console.log('üîç Testando Sistema de Monitoramento de Login...\n');

async function testLoginAttemptMonitoring() {
  console.log('üìä 1. Testando rastreamento de tentativas de login...\n');

  // Clear existing attempts
  if (global.loginAttempts) {
    global.loginAttempts = [];
  }

  const testEmail = 'test@igreja.com';
  const testIP = '192.168.1.100';
  const testUserAgent = 'Mozilla/5.0 Test Browser';

  // Test successful login recording
  console.log('   ‚úÖ Registrando login bem-sucedido...');
  await AuthService.recordLoginAttempt(testEmail, true, testIP, testUserAgent);
  
  const canAttemptAfterSuccess = await AuthService.checkLoginAttempts(testEmail, testIP);
  console.log(`   Pode tentar login ap√≥s sucesso: ${canAttemptAfterSuccess ? '‚úÖ Sim' : '‚ùå N√£o'}`);

  // Test failed login attempts
  console.log('\n   ‚ùå Registrando tentativas de login falhadas...');
  for (let i = 1; i <= 3; i++) {
    await AuthService.recordLoginAttempt(testEmail, false, testIP, testUserAgent, 'INVALID_PASSWORD');
    console.log(`   Tentativa falhada ${i} registrada`);
  }

  const canAttemptAfter3Failures = await AuthService.checkLoginAttempts(testEmail, testIP);
  console.log(`   Pode tentar login ap√≥s 3 falhas: ${canAttemptAfter3Failures ? '‚úÖ Sim' : '‚ùå N√£o'}`);

  // Test account lockout
  console.log('\n   üîí Testando bloqueio de conta...');
  for (let i = 4; i <= 6; i++) {
    await AuthService.recordLoginAttempt(testEmail, false, testIP, testUserAgent, 'INVALID_PASSWORD');
    console.log(`   Tentativa falhada ${i} registrada`);
  }

  const canAttemptAfterLockout = await AuthService.checkLoginAttempts(testEmail, testIP);
  console.log(`   Pode tentar login ap√≥s 6 falhas: ${canAttemptAfterLockout ? '‚ùå Deveria estar bloqueado' : '‚úÖ Corretamente bloqueado'}`);

  const isLocked = await AuthService.isAccountLocked(testEmail);
  console.log(`   Conta est√° bloqueada: ${isLocked ? '‚úÖ Sim' : '‚ùå N√£o'}`);

  console.log('\nüìà 2. Testando an√°lise de estat√≠sticas de login...\n');

  // Test login statistics
  const stats = await SecurityMonitoringService.analyzeLoginAttempts(60);
  console.log('   Estat√≠sticas dos √∫ltimos 60 minutos:');
  console.log(`   - Total de tentativas: ${stats.totalAttempts}`);
  console.log(`   - Tentativas bem-sucedidas: ${stats.successfulAttempts}`);
  console.log(`   - Tentativas falhadas: ${stats.failedAttempts}`);
  console.log(`   - IPs √∫nicos: ${stats.uniqueIPs}`);
  console.log(`   - Usu√°rios √∫nicos: ${stats.uniqueUsers}`);
  console.log(`   - Principais raz√µes de falha:`);
  stats.topFailureReasons.forEach(reason => {
    console.log(`     * ${reason.reason}: ${reason.count} vezes`);
  });

  console.log('\nüö® 3. Testando detec√ß√£o de padr√µes suspeitos...\n');

  // Add more suspicious attempts to trigger pattern detection
  const suspiciousIP = '10.0.0.1';
  console.log('   Simulando atividade suspeita...');
  
  // Rapid attempts from same IP
  for (let i = 0; i < 12; i++) {
    await AuthService.recordLoginAttempt(`user${i}@igreja.com`, false, suspiciousIP, testUserAgent, 'INVALID_PASSWORD');
  }

  // Multiple IPs for same user
  const multiIPUser = 'admin@igreja.com';
  const ips = ['192.168.1.1', '10.0.0.2', '172.16.0.1', '203.0.113.1'];
  for (const ip of ips) {
    await AuthService.recordLoginAttempt(multiIPUser, false, ip, testUserAgent, 'INVALID_PASSWORD');
  }

  const patterns = await SecurityMonitoringService.detectSuspiciousPatterns();
  console.log(`   Padr√µes suspeitos detectados: ${patterns.length}`);
  
  patterns.forEach((pattern, index) => {
    console.log(`\n   Padr√£o ${index + 1}:`);
    console.log(`   - Tipo: ${pattern.type}`);
    console.log(`   - Descri√ß√£o: ${pattern.description}`);
    console.log(`   - Pontua√ß√£o de risco: ${pattern.riskScore}/100`);
    console.log(`   - Contas afetadas: ${pattern.affectedAccounts.length}`);
    console.log(`   - Evid√™ncias:`);
    pattern.evidence.forEach(evidence => {
      console.log(`     * ${evidence}`);
    });
  });

  console.log('\nüö® 4. Testando gera√ß√£o de alertas de seguran√ßa...\n');

  const alerts = await SecurityMonitoringService.generateSecurityAlerts();
  console.log(`   Alertas de seguran√ßa gerados: ${alerts.length}`);
  
  alerts.forEach((alert, index) => {
    console.log(`\n   Alerta ${index + 1}:`);
    console.log(`   - Tipo: ${alert.type}`);
    console.log(`   - Severidade: ${alert.severity}`);
    console.log(`   - Mensagem: ${alert.message}`);
    console.log(`   - Usu√°rios afetados: ${alert.affectedUsers.length}`);
    console.log(`   - IPs envolvidos: ${alert.ipAddresses.length}`);
    console.log(`   - Timestamp: ${alert.timestamp.toLocaleString()}`);
  });

  console.log('\nüîê 5. Testando informa√ß√µes de bloqueio de conta...\n');

  const lockoutInfo = await SecurityMonitoringService.getAccountLockoutInfo(testEmail);
  console.log(`   Informa√ß√µes de bloqueio para ${testEmail}:`);
  console.log(`   - Est√° bloqueada: ${lockoutInfo.isLocked ? '‚úÖ Sim' : '‚ùå N√£o'}`);
  console.log(`   - Tentativas falhadas: ${lockoutInfo.failedAttempts}`);
  console.log(`   - Raz√£o do bloqueio: ${lockoutInfo.lockoutReason || 'N/A'}`);
  console.log(`   - √öltima tentativa: ${lockoutInfo.lastAttemptAt?.toLocaleString() || 'N/A'}`);
  console.log(`   - Pode tentar novamente em: ${lockoutInfo.canRetryAt?.toLocaleString() || 'Agora'}`);

  console.log('\nüìä 6. Testando dashboard de seguran√ßa...\n');

  const dashboard = await SecurityMonitoringService.getSecurityDashboard();
  console.log('   Dashboard de seguran√ßa:');
  console.log(`   - Total de tentativas (1h): ${dashboard.stats.totalAttempts}`);
  console.log(`   - Alertas ativos: ${dashboard.alerts.length}`);
  console.log(`   - Padr√µes suspeitos: ${dashboard.patterns.length}`);
  console.log(`   - Eventos recentes: ${dashboard.recentEvents.length}`);
  console.log(`   - Contas bloqueadas: ${dashboard.lockedAccounts.length}`);
  
  if (dashboard.lockedAccounts.length > 0) {
    console.log('   Contas bloqueadas:');
    dashboard.lockedAccounts.forEach(account => {
      console.log(`     - ${account}`);
    });
  }

  console.log('\nüìù 7. Testando hist√≥rico de login...\n');

  // Test login history
  const history = await AuthService.getLoginHistory('test-user-id', 10);
  console.log(`   Hist√≥rico de login encontrado: ${history.length} entradas`);

  // Test security events
  const securityEvents = await AuthService.getSecurityEvents(10);
  console.log(`   Eventos de seguran√ßa encontrados: ${securityEvents.length} entradas`);

  console.log('\nüßπ 8. Testando limpeza de dados antigos...\n');

  const beforeCleanup = global.loginAttempts ? global.loginAttempts.length : 0;
  console.log(`   Tentativas de login antes da limpeza: ${beforeCleanup}`);
  
  await SecurityMonitoringService.cleanupOldData();
  
  const afterCleanup = global.loginAttempts ? global.loginAttempts.length : 0;
  console.log(`   Tentativas de login ap√≥s limpeza: ${afterCleanup}`);
  console.log(`   Status da limpeza: ${afterCleanup <= beforeCleanup ? '‚úÖ Funcionando' : '‚ùå Problema'}`);

  console.log('\nüéØ 9. Testando cen√°rios espec√≠ficos...\n');

  // Test IP-based blocking
  console.log('   Testando bloqueio por IP...');
  const maliciousIP = '192.168.1.999';
  
  // Generate many failed attempts from same IP
  for (let i = 0; i < 15; i++) {
    await AuthService.recordLoginAttempt(`victim${i}@igreja.com`, false, maliciousIP, testUserAgent, 'BRUTE_FORCE');
  }

  const canAttemptFromMaliciousIP = await AuthService.checkLoginAttempts('newuser@igreja.com', maliciousIP);
  console.log(`   Pode tentar login do IP malicioso: ${canAttemptFromMaliciousIP ? '‚ùå Deveria estar bloqueado' : '‚úÖ Corretamente bloqueado'}`);

  // Test session cleanup
  console.log('\n   Testando limpeza de sess√µes...');
  await AuthService.cleanExpiredSessions();
  console.log('   ‚úÖ Limpeza de sess√µes executada');

  console.log('\nüéâ Todos os testes de monitoramento de login foram executados!');
  console.log('üìä Resumo dos testes:');
  console.log('   ‚úÖ Rastreamento de tentativas de login');
  console.log('   ‚úÖ Bloqueio de conta por m√∫ltiplas falhas');
  console.log('   ‚úÖ An√°lise de estat√≠sticas');
  console.log('   ‚úÖ Detec√ß√£o de padr√µes suspeitos');
  console.log('   ‚úÖ Gera√ß√£o de alertas de seguran√ßa');
  console.log('   ‚úÖ Informa√ß√µes de bloqueio');
  console.log('   ‚úÖ Dashboard de seguran√ßa');
  console.log('   ‚úÖ Hist√≥rico e eventos');
  console.log('   ‚úÖ Limpeza de dados');
  console.log('   ‚úÖ Cen√°rios espec√≠ficos');
}

// Run the tests
testLoginAttemptMonitoring().catch(console.error);