import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { UpcomingEventsTable } from '../UpcomingEventsTable';

describe('UpcomingEventsTable', () => {
  const mockEvents = [
    { 
      id: '1', 
      name: 'Culto Domingo', 
      date: '21/07/2024', 
      time: '19:00', 
      location: 'Igreja Principal',
      type: 'culto'
    },
    { 
      id: '2', 
      name: 'Reuni√£o de L√≠deres', 
      date: '22/07/2024', 
      time: '20:00', 
      location: 'Sala de Reuni√µes', 
      isToday: true,
      type: 'reuniao'
    },
    { 
      id: '3', 
      name: 'Evento Especial', 
      date: '25/07/2024', 
      time: '15:00', 
      location: 'Audit√≥rio', 
      isImportant: true,
      type: 'evento'
    },
  ];

  it('renderiza tabela com eventos', () => {
    render(<UpcomingEventsTable events={mockEvents} />);
    expect(screen.getByText('Culto Domingo')).toBeInTheDocument();
    expect(screen.getByText('Reuni√£o de L√≠deres')).toBeInTheDocument();
    expect(screen.getByText('Igreja Principal')).toBeInTheDocument();
    expect(screen.getByText('Hoje')).toBeInTheDocument();
    expect(screen.getByText('Evento Especial')).toBeInTheDocument();
    expect(screen.getByText('Importante')).toBeInTheDocument();
  });

  it('exibe estado vazio quando n√£o h√° eventos', () => {
    render(<UpcomingEventsTable events={[]} />);
    expect(screen.getByText(/Nenhum evento futuro cadastrado/i)).toBeInTheDocument();
    expect(screen.getByText(/Criar Evento/i)).toBeInTheDocument();
    expect(screen.getByText('üìÖ')).toBeInTheDocument();
  });

  it('renderiza cabe√ßalhos da tabela', () => {
    render(<UpcomingEventsTable events={mockEvents} />);
    expect(screen.getByText('Evento')).toBeInTheDocument();
    expect(screen.getByText('Data')).toBeInTheDocument();
    expect(screen.getByText('Hor√°rio')).toBeInTheDocument();
    expect(screen.getByText('Local')).toBeInTheDocument();
    expect(screen.getByText('A√ß√µes')).toBeInTheDocument();
  });

  it('renderiza filtros e campo de busca', () => {
    render(<UpcomingEventsTable events={mockEvents} />);
    expect(screen.getByLabelText('Filtrar:')).toBeInTheDocument();
    expect(screen.getByLabelText('Buscar:')).toBeInTheDocument();
    expect(screen.getByText('Todos')).toBeInTheDocument();
    expect(screen.getByText('Cultos')).toBeInTheDocument();
    expect(screen.getByText('Reuni√µes')).toBeInTheDocument();
  });

  it('filtra eventos por tipo', () => {
    render(<UpcomingEventsTable events={mockEvents} />);
    
    // Inicialmente todos os eventos s√£o mostrados
    expect(screen.getByText('Culto Domingo')).toBeInTheDocument();
    expect(screen.getByText('Reuni√£o de L√≠deres')).toBeInTheDocument();
    expect(screen.getByText('Evento Especial')).toBeInTheDocument();
    
    // Filtrar por cultos
    fireEvent.change(screen.getByLabelText('Filtrar eventos por tipo'), { target: { value: 'culto' } });
    expect(screen.getByText('Culto Domingo')).toBeInTheDocument();
    expect(screen.queryByText('Reuni√£o de L√≠deres')).not.toBeInTheDocument();
    expect(screen.queryByText('Evento Especial')).not.toBeInTheDocument();
    
    // Filtrar por eventos
    fireEvent.change(screen.getByLabelText('Filtrar eventos por tipo'), { target: { value: 'evento' } });
    expect(screen.queryByText('Culto Domingo')).not.toBeInTheDocument();
    expect(screen.queryByText('Reuni√£o de L√≠deres')).not.toBeInTheDocument();
    expect(screen.getByText('Evento Especial')).toBeInTheDocument();
  });

  it('busca eventos por texto', () => {
    render(<UpcomingEventsTable events={mockEvents} />);
    
    // Buscar por "Domingo"
    fireEvent.change(screen.getByLabelText('Buscar eventos por nome ou local'), { target: { value: 'Domingo' } });
    expect(screen.getByText('Culto Domingo')).toBeInTheDocument();
    expect(screen.queryByText('Reuni√£o de L√≠deres')).not.toBeInTheDocument();
    expect(screen.queryByText('Evento Especial')).not.toBeInTheDocument();
    
    // Buscar por "Sala"
    fireEvent.change(screen.getByLabelText('Buscar eventos por nome ou local'), { target: { value: 'Sala' } });
    expect(screen.queryByText('Culto Domingo')).not.toBeInTheDocument();
    expect(screen.getByText('Reuni√£o de L√≠deres')).toBeInTheDocument();
    expect(screen.queryByText('Evento Especial')).not.toBeInTheDocument();
  });

  it('ordena eventos por nome', () => {
    render(<UpcomingEventsTable events={mockEvents} />);
    
    // Clicar no cabe√ßalho "Evento" para ordenar por nome
    fireEvent.click(screen.getByText('Evento'));
    
    // Verificar ordem alfab√©tica (Culto, Evento, Reuni√£o)
    const rows = screen.getAllByRole('row');
    expect(rows[1]).toHaveTextContent('Culto Domingo');
    expect(rows[2]).toHaveTextContent('Evento Especial');
    expect(rows[3]).toHaveTextContent('Reuni√£o de L√≠deres');
    
    // Clicar novamente para inverter a ordem
    fireEvent.click(screen.getByText('Evento'));
    
    // Verificar ordem alfab√©tica inversa (Reuni√£o, Evento, Culto)
    const rowsReversed = screen.getAllByRole('row');
    expect(rowsReversed[1]).toHaveTextContent('Reuni√£o de L√≠deres');
    expect(rowsReversed[2]).toHaveTextContent('Evento Especial');
    expect(rowsReversed[3]).toHaveTextContent('Culto Domingo');
  });

  it('renderiza bot√µes de a√ß√£o', () => {
    render(<UpcomingEventsTable events={mockEvents} canEdit={true} />);
    
    // Verificar se os bot√µes de a√ß√£o est√£o presentes
    expect(screen.getAllByText('Visualizar').length).toBe(3);
    expect(screen.getAllByText('Editar').length).toBe(3);
  });

  it('n√£o renderiza bot√£o de editar quando canEdit √© false', () => {
    render(<UpcomingEventsTable events={mockEvents} canEdit={false} />);
    
    // Verificar se os bot√µes de visualizar est√£o presentes mas os de editar n√£o
    expect(screen.getAllByText('Visualizar').length).toBe(3);
    expect(screen.queryByText('Editar')).not.toBeInTheDocument();
  });
});